 elif len(factors) >= 3:
            ## HERE FOR 3D PLOT. THE USER CAN PICK 2D or 3D PLOT

            plot_type = ["2D", "3D"]
            plot_choice = left_t3.radio(
                "Select plot type", plot_type, key="plot_choice"
            )

            if plot_choice == "2D":

                # First dimension selection
                dimension_x = left_t3.selectbox(
                    "Select a factor for X-axis:",
                    factors,
                    key="dim_x",
                    on_change=update_fig_cluster,
                )
                st.session_state.dimension_x = dimension_x

                # Second dimension selection (excluding first)
                available_for_y = [f for f in factors if f != dimension_x]
                dimension_y = left_t3.selectbox(
                    "Select a factor for Y-axis:",
                    available_for_y,
                    key="dim_y",
                    on_change=update_fig_cluster,
                )
                st.session_state.dimension_y = dimension_y

                left_t3.write(
                    f"You selected **{dimension_x}** for the X-axis and **{dimension_y}** for the Y-axis."
                )

                vis_cluster = ClusterVisualisation(
                    st.session_state.df,
                    {
                        k: v["label"]
                        for k, v in st.session_state.FA_component_dict.items()
                    },
                    st.session_state.u_labels,
                    st.session_state.centroids,
                    st.session_state.ind_col_map,
                )
                st.session_state.fig_cluster = vis_cluster.fig

                right_t3.plotly_chart(
                    st.session_state.fig_cluster,
                    use_container_width=True,
                    theme="streamlit",
                )
                st.session_state.tab3_done = True

            else:
                # First dimension selection
                dimension_x = left_t3.selectbox(
                    "Select a factor for X-axis:",
                    factors,
                    key="dim_x",
                    on_change=update_fig_cluster3d,
                )
                st.session_state.dimension_x = dimension_x

                # Second dimension selection (excluding first)
                available_for_y = [f for f in factors if f != dimension_x]
                dimension_y = left_t3.selectbox(
                    "Select a factor for Y-axis:",
                    available_for_y,
                    key="dim_y",
                    on_change=update_fig_cluster3d,
                )
                st.session_state.dimension_y = dimension_y

                # Third dimension selection (excluding first and second)
                dimension_z = left_t3.selectbox(
                    "Select a factor for Z-axis:",
                    [f for f in factors if f not in [dimension_x, dimension_y]],
                    key="dim_z",
                    on_change=update_fig_cluster3d,
                )
                st.session_state.dimension_z = dimension_z

                left_t3.write(
                    f"You selected **{dimension_x}** for the X-axis, **{dimension_y}** for the Y-axis, and **{dimension_z}** for the Z-axis."
                )

                vis_cluster = ClusterVisualisation3D(
                    st.session_state.df,
                    {
                        k: v["label"]
                        for k, v in st.session_state.FA_component_dict.items()
                    },
                    st.session_state.u_labels,
                    st.session_state.centroids,
                    st.session_state.ind_col_map,
                )
                st.session_state.fig_cluster3d = vis_cluster.fig

                right_t3.plotly_chart(
                    st.session_state.fig_cluster3d,
                    use_container_width=True,
                    theme="streamlit",
                )
                st.session_state.tab3_done = True

        else:
            ### HERE FOR 2D PLOT ONLY WHEN THERE IS ONLY 2 FACTORS

            # First dimension selection
            dimension_x = left_t3.selectbox(
                "Select a factor for X-axis:",
                factors,
                key="dim_x",
                on_change=update_fig_cluster,
            )
            st.session_state.dimension_x = dimension_x

            # Second dimension selection (excluding first)
            available_for_y = [f for f in factors if f != dimension_x]
            dimension_y = left_t3.selectbox(
                "Select a factor for Y-axis:",
                available_for_y,
                key="dim_y",
                on_change=update_fig_cluster,
            )
            st.session_state.dimension_y = dimension_y

            left_t3.write(
                f"You selected **{dimension_x}** for the X-axis and **{dimension_y}** for the Y-axis."
            )

            if left_t3.button("Run Visualisation"):
                vis_cluster = ClusterVisualisation(
                    st.session_state.df,
                    {
                        k: v["label"]
                        for k, v in st.session_state.FA_component_dict.items()
                    },
                    st.session_state.u_labels,
                    st.session_state.centroids,
                    st.session_state.ind_col_map,
                )
                st.session_state.fig_cluster = vis_cluster.fig

                right_t3.plotly_chart(
                    st.session_state.fig_cluster,
                    use_container_width=True,
                    theme="streamlit",
                )

        with right_t3:
            # Cluster description
            st.markdown(
                "<h3><b>Description of each cluster</b></h3>", unsafe_allow_html=True
            )
            list_cluster_name = st.session_state.list_cluster_name
            list_color_cluster = st.session_state.ind_col_map
            list_description_cluster = st.session_state.list_description_cluster
            if list_color_cluster is None:
                pass
            else:
                for i in list_color_cluster:
                    display_cluster_color(list_cluster_name[i], list_color_cluster[i])
                    st.write(list_description_cluster[i])'''
